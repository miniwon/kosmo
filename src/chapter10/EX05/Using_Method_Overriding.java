package chapter10.EX05;

/*
 * 메서드 오버로딩(Method Overloading)
 * 		- 입력매개변수의 개수나 자료형이 다른 여러 개의 동일한 이름을 지닌 메서드를 같은 공간에 정의하는 것
 * 		- 시그니처: 1. 메서드명, 2. 입력매개변수의 자료형, 3. 입력매개변수의 개수 (*리턴 타입은 시그니처가 아니다)
 * 		- 자바 가상 머신은 메서드 시그니처가 다르면 메서드명이 동일해도 다른 메서드로 인식
 * 		- 생성자, 메서드
 */

/*
 * 메서드 오버라이딩(Method Overriding) - 상속 관계에서만 이루어짐
 * 		- 부모 클래스에게 상속받은 메서드와 동일한 이름의 메서드를 재정의하는 것
 * 		- 자식 클래스에서 부모 클래스의 메서드를 오버라이딩하기 위한 조건
 * 			1. 시그니처(메서드명, 입력매개변수의 자료형과 개수)가 같아야 한다
 * 			2. 리턴 타입이 같아야 한다
 * 			3. 부모 클래스의 메서드보다 접근 지정자의 범위가 같거나 넓어야 한다
 * 		- 부모 클래스의 메서드는 삭제되는 것이 아니라 덮어씌워지는 형태
 *  @Override: @ <- 이노테이션, 자식 클래스에서 메서드 오버라이딩을 할 때 오류를 방지하는 기능
 */

class A {
	void print() {
		System.out.println("A 클래스 출력");
	}
}
class B extends A {
	@Override				// 메서드 오버라이딩 오류를 방지하는 설정
	void print() {			// 메서드 오버라이딩: 
		System.out.println("B 클래스 출력");
	}
}

public class Using_Method_Overriding {

	public static void main(String[] args) {
		// 1. A 객체 생성, A 타입으로 저정
		A aa1 = new A();
		aa1.print();			// A 클래스 출력
		
		// 2. B 객체 생성, B 타입으로 지정
		B bb1 = new B();
		bb1.print();			// B 클래스 출력
		
		// 3. B 객체 생성, A 타입으로 지정
		A aa2 = new B();
		aa2.print();			// B 클래스 출력(오버라이딩된 메서드가 출력)

	}

}
